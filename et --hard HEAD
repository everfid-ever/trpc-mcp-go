warning: in the working copy of 'examples/auth/server/main.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'go.mod', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/auth/server/clients.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/auth/server/handler/authorize.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/auth/server/handler/metadata.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/auth/server/handler/register.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/auth/server/handler/revocation.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/auth/server/middleware/security.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/auth/server/provider.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/auth/server/providers/proxy.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/auth/server/router/router.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/auth/server/types.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/auth/store/client.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/auth/store/types.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/auth/types.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/errors/auth.go', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'internal/errors/errors.go', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/examples/auth/server/main.go b/examples/auth/server/main.go[m
[1mindex 4e376dd..b445174 100644[m
[1m--- a/examples/auth/server/main.go[m
[1m+++ b/examples/auth/server/main.go[m
[36m@@ -133,7 +133,6 @@[m [mfunc testClientRegistration() {[m
 		log.Printf("✅ 测试1成功:")[m
 		log.Printf("   Client ID: %s", result1.ClientID)[m
 		log.Printf("   Client Secret: %s", result1.ClientSecret)[m
[31m-		log.Printf("   Client Name: %s", result1.ClientName)[m
 	}[m
 [m
 	// 测试案例2: 公共客户端注册[m
[36m@@ -154,7 +153,6 @@[m [mfunc testClientRegistration() {[m
 		log.Printf("✅ 测试2成功:")[m
 		log.Printf("   Client ID: %s", result2.ClientID)[m
 		log.Printf("   Client Secret: %s (公共客户端应为空)", result2.ClientSecret)[m
[31m-		log.Printf("   Client Name: %s", result2.ClientName)[m
 	}[m
 [m
 	// 测试案例3: 错误请求[m
[36m@@ -179,33 +177,33 @@[m [mfunc testClientRegistration() {[m
 }[m
 [m
 // 注册客户端的辅助函数[m
[31m-func registerClient(metadata auth.OAuthClientMetadata) (auth.OAuthClientInformationFull, error) {[m
[32m+[m[32mfunc registerClient(metadata auth.OAuthClientMetadata) (auth.OAuthClientInformation, error) {[m
 	jsonData, err := json.Marshal(metadata)[m
 	if err != nil {[m
[31m-		return auth.OAuthClientInformationFull{}, err[m
[32m+[m		[32mreturn auth.OAuthClientInformation{}, err[m
 	}[m
 [m
 	resp, err := http.Post("http://localhost:8080/register", "application/json", bytes.NewBuffer(jsonData))[m
 	if err != nil {[m
[31m-		return auth.OAuthClientInformationFull{}, err[m
[32m+[m		[32mreturn auth.OAuthClientInformation{}, err[m
 	}[m
 	defer resp.Body.Close()[m
 [m
 	body, err := io.ReadAll(resp.Body)[m
 	if err != nil {[m
[31m-		return auth.OAuthClientInformationFull{}, err[m
[32m+[m		[32mreturn auth.OAuthClientInformation{}, err[m
 	}[m
 [m
 	if resp.StatusCode != http.StatusCreated {[m
[31m-		return auth.OAuthClientInformationFull{}, fmt.Errorf("注册失败 (状态码: %d): %s", resp.StatusCode, string(body))[m
[32m+[m		[32mreturn auth.OAuthClientInformation{}, fmt.Errorf("注册失败 (状态码: %d): %s", resp.StatusCode, string(body))[m
 	}[m
 [m
 	var result auth.OAuthClientInformationFull[m
 	if err := json.Unmarshal(body, &result); err != nil {[m
[31m-		return auth.OAuthClientInformationFull{}, err[m
[32m+[m		[32mreturn auth.OAuthClientInformation{}, err[m
 	}[m
 [m
[31m-	return result, nil[m
[32m+[m	[32mreturn result.OAuthClientInformation, nil[m
 }[m
 [m
 // 测试元数据端点[m
[1mdiff --git a/internal/auth/server/router/router.go b/internal/auth/server/router/router.go[m
[1mindex f924945..78f0cfb 100644[m
[1m--- a/internal/auth/server/router/router.go[m
[1m+++ b/internal/auth/server/router/router.go[m
[36m@@ -33,13 +33,6 @@[m [mtype AuthRouterOptions struct {[m
 	// ResourceName 在受保护资源元数据中显示的资源名称[m
 	// The resource name to be displayed in protected resource metadata[m
 	ResourceName *string[m
[31m-[m
[31m-	// TODO: 个别路由选项[m
[31m-	// Individual options per route[m
[31m-	// AuthorizationOptions[m
[31m-	// ClientRegistrationOptions[m
[31m-	// RevocationOptions[m
[31m-	// TokenOptions[m
 }[m
 [m
 type AuthMetadataOptions struct {[m
