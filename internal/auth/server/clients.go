package server

import (
	"fmt"

	"trpc.group/trpc-go/trpc-mcp-go/internal/auth"
)

// OAuthClientsStoreInterface 有关此服务器注册的OAuth客户端的的获取与动态注册
// Stores information about registered OAuth clients for this server.
type OAuthClientsStoreInterface interface {
	// GetClient 根据客户端ID返回注册客户端的信息。
	// 如果未找到客户端，返回nil。
	// Returns information about a registered client, based on its ID.
	// Returns nil if the client is not found.
	GetClient(clientId string) (*auth.OAuthClientInformationFull, error)

	// SupportDynamicClientRegistration RegisterClient向服务器注册一个新客户端。客户端ID和密钥将由库自动生成。
	// 可以返回修改后的客户端信息，以反映服务器强制执行的特定值。
	// 注意：实现不应直接删除过期的客户端密钥。此库提供的认证中间件会自动检查 `client_secret_expires_at` 字段并拒绝使用过期密钥的请求。任何自定义客户端认证逻辑也应检查 `client_secret_expires_at` 字段。
	// 如果未实现，则不支持动态客户端注册。
	// Registers a new client with the server. The client ID and secret will be automatically generated by the library.
	// A modified version of the client information can be returned to reflect specific values enforced by the server.
	// NOTE: Implementations should NOT delete expired client secrets in-place. Auth middleware provided by this library will automatically check the `client_secret_expires_at` field and reject requests with expired secrets. Any custom logic for authenticating clients should check the `client_secret_expires_at` field as well.
	// If unimplemented, dynamic client registration is unsupported.
	// 可选方法 / Optional method
	// 可选方法动态客户端注册 / Dynamic client registration
	SupportDynamicClientRegistration
}

type SupportDynamicClientRegistration interface {
	RegisterClient(client auth.OAuthClientInformationFull) (*auth.OAuthClientInformationFull, error)
}

type OAuthClientsStore struct {
	getClient      func(clientID string) (*auth.OAuthClientInformationFull, error)
	registerClient func(client auth.OAuthClientInformationFull) (*auth.OAuthClientInformationFull, error)
}

func (s OAuthClientsStore) GetClient(clientID string) (*auth.OAuthClientInformationFull, error) {
	return s.getClient(clientID)
}

func (s OAuthClientsStore) RegisterClient(client auth.OAuthClientInformationFull) (*auth.OAuthClientInformationFull, error) {
	if s.registerClient == nil {
		return nil, fmt.Errorf("dynamic client registration is not supported")
	}
	return s.registerClient(client)
}

func NewOAuthClientStoreSupportDynamicRegistration(getClient func(clientID string) (*auth.OAuthClientInformationFull, error), registerClient func(client auth.OAuthClientInformationFull) (*auth.OAuthClientInformationFull, error)) *OAuthClientsStore {
	return &OAuthClientsStore{
		getClient:      getClient,
		registerClient: registerClient,
	}
}
func NewOAuthClientStore(getClient func(clientID string) (*auth.OAuthClientInformationFull, error)) *OAuthClientsStore {
	return &OAuthClientsStore{
		getClient: getClient,
	}
}

// SupportsRegistration checks if dynamic client registration is supported
func (s OAuthClientsStore) SupportsRegistration() bool {
	return s.registerClient != nil
}
